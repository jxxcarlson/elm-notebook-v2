module Evergreen.Migrate.V4 exposing (..)

{-| This migration file was automatically generated by the lamdera compiler.

It includes:

  - A migration for each of the 6 Lamdera core types that has changed
  - A function named `migrate_ModuleName_TypeName` for each changed/custom type

Expect to see:

  - `Unimplement–µd` values as placeholders wherever I was unable to figure out a clear migration path for you
  - `@NOTICE` comments for things you should know about, i.e. new custom type constructors that won't get any
    value mappings from the old type by default

You can edit this file however you wish! It won't be generated again.

See <https://dashboard.lamdera.app/docs/evergreen> for more info.

-}

import Dict
import Evergreen.V2.Authentication
import Evergreen.V2.Credentials
import Evergreen.V2.Notebook.Book
import Evergreen.V2.Notebook.Cell
import Evergreen.V2.Notebook.DataSet
import Evergreen.V2.Notebook.Types
import Evergreen.V2.Types
import Evergreen.V2.User
import Evergreen.V4.Authentication
import Evergreen.V4.Credentials
import Evergreen.V4.Notebook.Book
import Evergreen.V4.Notebook.Cell
import Evergreen.V4.Notebook.DataSet
import Evergreen.V4.Notebook.Types
import Evergreen.V4.Types
import Evergreen.V4.User
import Lamdera.Migrations exposing (..)
import List
import Maybe


frontendModel : Evergreen.V2.Types.FrontendModel -> ModelMigration Evergreen.V4.Types.FrontendModel Evergreen.V4.Types.FrontendMsg
frontendModel old =
    ModelMigrated ( migrate_Types_FrontendModel old, Cmd.none )


backendModel : Evergreen.V2.Types.BackendModel -> ModelMigration Evergreen.V4.Types.BackendModel Evergreen.V4.Types.BackendMsg
backendModel old =
    ModelMigrated ( migrate_Types_BackendModel old, Cmd.none )


frontendMsg : Evergreen.V2.Types.FrontendMsg -> MsgMigration Evergreen.V4.Types.FrontendMsg Evergreen.V4.Types.FrontendMsg
frontendMsg old =
    MsgUnchanged


toBackend : Evergreen.V2.Types.ToBackend -> MsgMigration Evergreen.V4.Types.ToBackend Evergreen.V4.Types.BackendMsg
toBackend old =
    MsgMigrated ( migrate_Types_ToBackend old, Cmd.none )


backendMsg : Evergreen.V2.Types.BackendMsg -> MsgMigration Evergreen.V4.Types.BackendMsg Evergreen.V4.Types.BackendMsg
backendMsg old =
    MsgUnchanged


toFrontend : Evergreen.V2.Types.ToFrontend -> MsgMigration Evergreen.V4.Types.ToFrontend Evergreen.V4.Types.FrontendMsg
toFrontend old =
    MsgMigrated ( migrate_Types_ToFrontend old, Cmd.none )


migrate_Types_BackendModel : Evergreen.V2.Types.BackendModel -> Evergreen.V4.Types.BackendModel
migrate_Types_BackendModel old =
    { message = old.message
    , currentTime = old.currentTime
    , randomSeed = old.randomSeed
    , uuidCount = old.uuidCount
    , uuid = old.uuid
    , randomAtmosphericInt = old.randomAtmosphericInt
    , dataSetLibrary = old.dataSetLibrary
    , userToNoteBookDict = old.userToNoteBookDict |> migrate_Types_UserToNotebookDict
    , usernameToPackageDictDict = Dict.empty
    , slugDict = old.slugDict
    , authenticationDict = old.authenticationDict |> migrate_Authentication_AuthenticationDict
    }


migrate_Types_FrontendModel : Evergreen.V2.Types.FrontendModel -> Evergreen.V4.Types.FrontendModel
migrate_Types_FrontendModel old =
    { key = old.key
    , url = old.url
    , message = old.message
    , messages = old.messages |> List.map migrate_Types_Message
    , appState = old.appState |> migrate_Types_AppState
    , appMode = old.appMode |> migrate_Types_AppMode
    , currentTime = old.currentTime
    , tickCount = old.tickCount
    , clockState = old.clockState |> migrate_Types_ClockState
    , pressedKeys = old.pressedKeys
    , randomSeed = old.randomSeed
    , randomProbabilities = old.randomProbabilities
    , probabilityVectorLength = old.probabilityVectorLength
    , users = old.users
    , inputName = old.inputName
    , inputIdentifier = old.inputIdentifier
    , inputAuthor = old.inputAuthor
    , inputDescription = old.inputDescription
    , inputComments = old.inputComments
    , inputData = old.inputData
    , inputPackages = old.inputPackages
    , inputInitialStateValue = old.inputInitialStateValue
    , publicDataSetMetaDataList = old.publicDataSetMetaDataList
    , privateDataSetMetaDataList = old.privateDataSetMetaDataList
    , evalState = old.evalState |> migrate_Notebook_Types_EvalState
    , packageDict = Dict.empty
    , elmJsonError = old.elmJsonError
    , kvDict = old.kvDict
    , books = old.books |> List.map migrate_Notebook_Book_Book
    , currentCell = old.currentCell |> Maybe.map migrate_Notebook_Cell_Cell
    , cellInsertionDirection = old.cellInsertionDirection |> migrate_Notebook_Types_CellDirection
    , currentBook = old.currentBook |> migrate_Notebook_Book_Book
    , cellContent = old.cellContent
    , currentCellIndex = old.currentCellIndex
    , cloneReference = old.cloneReference
    , deleteNotebookState = old.deleteNotebookState |> migrate_Types_DeleteNotebookState
    , showNotebooks = old.showNotebooks |> migrate_Types_ShowNotebooks
    , signupState = old.signupState |> migrate_Types_SignupState
    , currentUser = old.currentUser
    , inputUsername = old.inputUsername
    , inputSignupUsername = old.inputSignupUsername
    , inputEmail = old.inputEmail
    , inputRealname = old.inputRealname
    , inputPassword = old.inputPassword
    , inputPasswordAgain = old.inputPasswordAgain
    , inputTitle = old.inputTitle
    , windowWidth = old.windowWidth
    , windowHeight = old.windowHeight
    , popupState = old.popupState |> migrate_Types_PopupState
    , showEditor = old.showEditor
    }


migrate_Authentication_AuthenticationDict : Evergreen.V2.Authentication.AuthenticationDict -> Evergreen.V4.Authentication.AuthenticationDict
migrate_Authentication_AuthenticationDict old =
    old |> Dict.map (\k -> migrate_Authentication_UserData)


migrate_Authentication_UserData : Evergreen.V2.Authentication.UserData -> Evergreen.V4.Authentication.UserData
migrate_Authentication_UserData old =
    { user = old.user |> migrate_User_User
    , credentials = old.credentials |> migrate_Credentials_Credentials
    }


migrate_Credentials_Credentials : Evergreen.V2.Credentials.Credentials -> Evergreen.V4.Credentials.Credentials
migrate_Credentials_Credentials old =
    case old of
        Evergreen.V2.Credentials.V1 p0 p1 ->
            Evergreen.V4.Credentials.V1 p0 p1


migrate_Notebook_Book_Book : Evergreen.V2.Notebook.Book.Book -> Evergreen.V4.Notebook.Book.Book
migrate_Notebook_Book_Book old =
    { id = old.id
    , dirty = old.dirty
    , slug = old.slug
    , origin = old.origin
    , author = old.author
    , createdAt = old.createdAt
    , updatedAt = old.updatedAt
    , public = old.public
    , title = old.title
    , cells = old.cells |> List.map migrate_Notebook_Cell_Cell
    , currentIndex = old.currentIndex
    }


migrate_Notebook_Cell_Cell : Evergreen.V2.Notebook.Cell.Cell -> Evergreen.V4.Notebook.Cell.Cell
migrate_Notebook_Cell_Cell old =
    { index = old.index
    , text = old.text
    , tipe = old.tipe |> migrate_Notebook_Cell_CellType
    , value = old.value |> migrate_Notebook_Cell_CellValue
    , cellState = old.cellState |> migrate_Notebook_Cell_CellState
    , locked = old.locked
    , report = old.report |> Maybe.map (List.map migrate_Notebook_Types_MessageItem)
    , replData = old.replData
    }


migrate_Notebook_Cell_CellState : Evergreen.V2.Notebook.Cell.CellState -> Evergreen.V4.Notebook.Cell.CellState
migrate_Notebook_Cell_CellState old =
    case old of
        Evergreen.V2.Notebook.Cell.CSEdit ->
            Evergreen.V4.Notebook.Cell.CSEdit

        Evergreen.V2.Notebook.Cell.CSView ->
            Evergreen.V4.Notebook.Cell.CSView


migrate_Notebook_Cell_CellType : Evergreen.V2.Notebook.Cell.CellType -> Evergreen.V4.Notebook.Cell.CellType
migrate_Notebook_Cell_CellType old =
    case old of
        Evergreen.V2.Notebook.Cell.CTCode ->
            Evergreen.V4.Notebook.Cell.CTCode

        Evergreen.V2.Notebook.Cell.CTMarkdown ->
            Evergreen.V4.Notebook.Cell.CTMarkdown


migrate_Notebook_Cell_CellValue : Evergreen.V2.Notebook.Cell.CellValue -> Evergreen.V4.Notebook.Cell.CellValue
migrate_Notebook_Cell_CellValue old =
    case old of
        Evergreen.V2.Notebook.Cell.CVString p0 ->
            Evergreen.V4.Notebook.Cell.CVString p0

        Evergreen.V2.Notebook.Cell.CVMarkdown p0 ->
            Evergreen.V4.Notebook.Cell.CVMarkdown p0

        Evergreen.V2.Notebook.Cell.CVNone ->
            Evergreen.V4.Notebook.Cell.CVNone


migrate_Notebook_DataSet_DataSet : Evergreen.V2.Notebook.DataSet.DataSet -> Evergreen.V4.Notebook.DataSet.DataSet
migrate_Notebook_DataSet_DataSet old =
    old


migrate_Notebook_DataSet_DataSetMetaData : Evergreen.V2.Notebook.DataSet.DataSetMetaData -> Evergreen.V4.Notebook.DataSet.DataSetMetaData
migrate_Notebook_DataSet_DataSetMetaData old =
    old


migrate_Notebook_Types_CellDirection : Evergreen.V2.Notebook.Types.CellDirection -> Evergreen.V4.Notebook.Types.CellDirection
migrate_Notebook_Types_CellDirection old =
    case old of
        Evergreen.V2.Notebook.Types.Up ->
            Evergreen.V4.Notebook.Types.Up

        Evergreen.V2.Notebook.Types.Down ->
            Evergreen.V4.Notebook.Types.Down


migrate_Notebook_Types_ElmPackageSummary : Evergreen.V2.Types.DictPackageNameToElmPackageSummary -> Evergreen.V4.Notebook.Types.ElmPackageSummary
migrate_Notebook_Types_ElmPackageSummary old =
    { dependencies = Dict.empty
    , exposedModules = []
    , name = "-"
    , version = "--"
    }


migrate_Notebook_Types_EvalState : Evergreen.V2.Notebook.Types.EvalState -> Evergreen.V4.Notebook.Types.EvalState
migrate_Notebook_Types_EvalState old =
    old


migrate_Notebook_Types_MessageItem : Evergreen.V2.Notebook.Types.MessageItem -> Evergreen.V4.Notebook.Types.MessageItem
migrate_Notebook_Types_MessageItem old =
    case old of
        Evergreen.V2.Notebook.Types.Plain p0 ->
            Evergreen.V4.Notebook.Types.Plain p0

        Evergreen.V2.Notebook.Types.Styled p0 ->
            Evergreen.V4.Notebook.Types.Styled (p0 |> migrate_Notebook_Types_StyledString)


migrate_Notebook_Types_StyledString : Evergreen.V2.Notebook.Types.StyledString -> Evergreen.V4.Notebook.Types.StyledString
migrate_Notebook_Types_StyledString old =
    old


migrate_Types_AppMode : Evergreen.V2.Types.AppMode -> Evergreen.V4.Types.AppMode
migrate_Types_AppMode old =
    case old of
        Evergreen.V2.Types.AMWorking ->
            Evergreen.V4.Types.AMWorking

        Evergreen.V2.Types.AMEditTitle ->
            Evergreen.V4.Types.AMEditTitle


migrate_Types_AppState : Evergreen.V2.Types.AppState -> Evergreen.V4.Types.AppState
migrate_Types_AppState old =
    case old of
        Evergreen.V2.Types.Loading ->
            Evergreen.V4.Types.Loading

        Evergreen.V2.Types.Loaded ->
            Evergreen.V4.Types.Loaded


migrate_Types_ClockState : Evergreen.V2.Types.ClockState -> Evergreen.V4.Types.ClockState
migrate_Types_ClockState old =
    case old of
        Evergreen.V2.Types.ClockRunning ->
            Evergreen.V4.Types.ClockRunning

        Evergreen.V2.Types.ClockStopped ->
            Evergreen.V4.Types.ClockStopped

        Evergreen.V2.Types.ClockPaused ->
            Evergreen.V4.Types.ClockPaused


migrate_Types_DataSetDescription : Evergreen.V2.Types.DataSetDescription -> Evergreen.V4.Types.DataSetDescription
migrate_Types_DataSetDescription old =
    case old of
        Evergreen.V2.Types.PublicDatasets ->
            Evergreen.V4.Types.PublicDatasets

        Evergreen.V2.Types.UserDatasets p0 ->
            Evergreen.V4.Types.UserDatasets p0


migrate_Types_DeleteNotebookState : Evergreen.V2.Types.DeleteNotebookState -> Evergreen.V4.Types.DeleteNotebookState
migrate_Types_DeleteNotebookState old =
    case old of
        Evergreen.V2.Types.WaitingToDeleteNotebook ->
            Evergreen.V4.Types.WaitingToDeleteNotebook

        Evergreen.V2.Types.CanDeleteNotebook ->
            Evergreen.V4.Types.CanDeleteNotebook


migrate_Types_Message : Evergreen.V2.Types.Message -> Evergreen.V4.Types.Message
migrate_Types_Message old =
    { txt = old.txt
    , status = old.status |> migrate_Types_MessageStatus
    }


migrate_Types_MessageStatus : Evergreen.V2.Types.MessageStatus -> Evergreen.V4.Types.MessageStatus
migrate_Types_MessageStatus old =
    case old of
        Evergreen.V2.Types.MSWhite ->
            Evergreen.V4.Types.MSWhite

        Evergreen.V2.Types.MSYellow ->
            Evergreen.V4.Types.MSYellow

        Evergreen.V2.Types.MSGreen ->
            Evergreen.V4.Types.MSGreen

        Evergreen.V2.Types.MSRed ->
            Evergreen.V4.Types.MSRed


migrate_Types_NoteBookDict : Evergreen.V2.Types.NoteBookDict -> Evergreen.V4.Types.NoteBookDict
migrate_Types_NoteBookDict old =
    old |> Dict.map (\k -> migrate_Notebook_Book_Book)


migrate_Types_PackageDict : Evergreen.V2.Types.DictNoteBookIdsToElmPackageSummaryDict -> Evergreen.V4.Types.PackageDict
migrate_Types_PackageDict old =
    old |> Dict.map (\k -> migrate_Notebook_Types_ElmPackageSummary)


migrate_Types_PopupState : Evergreen.V2.Types.PopupState -> Evergreen.V4.Types.PopupState
migrate_Types_PopupState old =
    case old of
        Evergreen.V2.Types.NoPopup ->
            Evergreen.V4.Types.NoPopup

        Evergreen.V2.Types.AdminPopup ->
            Evergreen.V4.Types.AdminPopup

        Evergreen.V2.Types.ManualPopup ->
            Evergreen.V4.Types.ManualPopup

        Evergreen.V2.Types.NewDataSetPopup ->
            Evergreen.V4.Types.NewDataSetPopup

        Evergreen.V2.Types.EditDataSetPopup p0 ->
            Evergreen.V4.Types.EditDataSetPopup (p0 |> migrate_Notebook_DataSet_DataSetMetaData)

        Evergreen.V2.Types.SignUpPopup ->
            Evergreen.V4.Types.SignUpPopup

        Evergreen.V2.Types.PackageListPopup ->
            Evergreen.V4.Types.PackageListPopup

        Evergreen.V2.Types.NewNotebookPopup ->
            Evergreen.V4.Types.NewNotebookPopup

        Evergreen.V2.Types.StateEditorPopup ->
            Evergreen.V4.Types.StateEditorPopup

        Evergreen.V2.Types.ViewPublicDataSetsPopup ->
            Evergreen.V4.Types.ViewPublicDataSetsPopup

        Evergreen.V2.Types.ViewPrivateDataSetsPopup ->
            Evergreen.V4.Types.ViewPrivateDataSetsPopup


migrate_Types_ShowNotebooks : Evergreen.V2.Types.ShowNotebooks -> Evergreen.V4.Types.ShowNotebooks
migrate_Types_ShowNotebooks old =
    case old of
        Evergreen.V2.Types.ShowUserNotebooks ->
            Evergreen.V4.Types.ShowUserNotebooks

        Evergreen.V2.Types.ShowPublicNotebooks ->
            Evergreen.V4.Types.ShowPublicNotebooks


migrate_Types_SignupState : Evergreen.V2.Types.SignupState -> Evergreen.V4.Types.SignupState
migrate_Types_SignupState old =
    case old of
        Evergreen.V2.Types.ShowSignUpForm ->
            Evergreen.V4.Types.ShowSignUpForm

        Evergreen.V2.Types.HideSignUpForm ->
            Evergreen.V4.Types.HideSignUpForm


migrate_Types_ToBackend : Evergreen.V2.Types.ToBackend -> Evergreen.V4.Types.ToBackend
migrate_Types_ToBackend old =
    case old of
        Evergreen.V2.Types.NoOpToBackend ->
            Evergreen.V4.Types.NoOpToBackend

        Evergreen.V2.Types.GetRandomSeed ->
            Evergreen.V4.Types.GetRandomSeed

        Evergreen.V2.Types.RunTask ->
            Evergreen.V4.Types.RunTask

        Evergreen.V2.Types.SendUsers ->
            Evergreen.V4.Types.SendUsers

        Evergreen.V2.Types.DeleteDataSet p0 ->
            Evergreen.V4.Types.DeleteDataSet (p0 |> migrate_Notebook_DataSet_DataSetMetaData)

        Evergreen.V2.Types.SaveDataSet p0 ->
            Evergreen.V4.Types.SaveDataSet (p0 |> migrate_Notebook_DataSet_DataSetMetaData)

        Evergreen.V2.Types.GetListOfDataSets p0 ->
            Evergreen.V4.Types.GetListOfDataSets (p0 |> migrate_Types_DataSetDescription)

        Evergreen.V2.Types.CreateDataSet p0 ->
            Evergreen.V4.Types.CreateDataSet (p0 |> migrate_Notebook_DataSet_DataSet)

        Evergreen.V2.Types.GetData p0 p1 p2 ->
            Evergreen.V4.Types.GetData p0 p1 p2

        Evergreen.V2.Types.GetDataSetForDownload p0 ->
            Evergreen.V4.Types.GetDataSetForDownload p0

        Evergreen.V2.Types.SaveElmJsonDependenciesBE p0 p1 ->
            Evergreen.V4.Types.SaveElmJsonDependenciesBE p0 (p1 |> migrate_Types_PackageDict)

        Evergreen.V2.Types.CreateNotebook p0 p1 ->
            Evergreen.V4.Types.CreateNotebook p0 p1

        Evergreen.V2.Types.ImportNewBook p0 p1 ->
            Evergreen.V4.Types.ImportNewBook p0 (p1 |> migrate_Notebook_Book_Book)

        Evergreen.V2.Types.SaveNotebook p0 ->
            Evergreen.V4.Types.SaveNotebook (p0 |> migrate_Notebook_Book_Book)

        Evergreen.V2.Types.DeleteNotebook p0 ->
            Evergreen.V4.Types.DeleteNotebook (p0 |> migrate_Notebook_Book_Book)

        Evergreen.V2.Types.GetPublicNotebook p0 ->
            Evergreen.V4.Types.GetPublicNotebook p0

        Evergreen.V2.Types.GetClonedNotebook p0 p1 ->
            Evergreen.V4.Types.GetClonedNotebook p0 p1

        Evergreen.V2.Types.GetPulledNotebook p0 p1 p2 p3 ->
            Evergreen.V4.Types.GetPulledNotebook p0 p1 p2 p3

        Evergreen.V2.Types.UpdateSlugDict p0 ->
            Evergreen.V4.Types.UpdateSlugDict (p0 |> migrate_Notebook_Book_Book)

        Evergreen.V2.Types.GetUsersNotebooks p0 ->
            Evergreen.V4.Types.GetUsersNotebooks p0

        Evergreen.V2.Types.GetPublicNotebooks p0 p1 ->
            Evergreen.V4.Types.GetPublicNotebooks (p0 |> Maybe.map migrate_Notebook_Book_Book) p1

        Evergreen.V2.Types.SignUpBE p0 p1 p2 ->
            Evergreen.V4.Types.SignUpBE p0 p1 p2

        Evergreen.V2.Types.SignInBEDev ->
            Evergreen.V4.Types.SignInBEDev

        Evergreen.V2.Types.SignInBE p0 p1 ->
            Evergreen.V4.Types.SignInBE p0 p1

        Evergreen.V2.Types.SignOutBE p0 ->
            Evergreen.V4.Types.SignOutBE p0

        Evergreen.V2.Types.UpdateUserWith p0 ->
            Evergreen.V4.Types.UpdateUserWith (p0 |> migrate_User_User)


migrate_Types_ToFrontend : Evergreen.V2.Types.ToFrontend -> Evergreen.V4.Types.ToFrontend
migrate_Types_ToFrontend old =
    case old of
        Evergreen.V2.Types.NoOpToFrontend ->
            Evergreen.V4.Types.NoOpToFrontend

        Evergreen.V2.Types.MessageReceived p0 ->
            Evergreen.V4.Types.MessageReceived (p0 |> migrate_Types_Message)

        Evergreen.V2.Types.GotRandomSeed p0 ->
            Evergreen.V4.Types.GotRandomSeed p0

        Evergreen.V2.Types.GotUsers p0 ->
            Evergreen.V4.Types.GotUsers p0

        Evergreen.V2.Types.GotListOfPublicDataSets p0 ->
            Evergreen.V4.Types.GotListOfPublicDataSets p0

        Evergreen.V2.Types.GotListOfPrivateDataSets p0 ->
            Evergreen.V4.Types.GotListOfPrivateDataSets p0

        Evergreen.V2.Types.GotData p0 p1 p2 ->
            Evergreen.V4.Types.GotData p0 p1 (p2 |> migrate_Notebook_DataSet_DataSet)

        Evergreen.V2.Types.GotDataForDownload p0 ->
            Evergreen.V4.Types.GotDataForDownload (p0 |> migrate_Notebook_DataSet_DataSet)

        Evergreen.V2.Types.GotUsersPackageDictInfo p0 ->
            Evergreen.V4.Types.NoOpToFrontend

        Evergreen.V2.Types.GotNotebook p0 ->
            Evergreen.V4.Types.GotNotebook (p0 |> migrate_Notebook_Book_Book)

        Evergreen.V2.Types.GotPublicNotebook p0 ->
            Evergreen.V4.Types.GotPublicNotebook (p0 |> migrate_Notebook_Book_Book)

        Evergreen.V2.Types.GotNotebooks p0 p1 ->
            Evergreen.V4.Types.GotNotebooks (p0 |> Maybe.map migrate_Notebook_Book_Book)
                (p1 |> List.map migrate_Notebook_Book_Book)

        Evergreen.V2.Types.SendMessage p0 ->
            Evergreen.V4.Types.SendMessage p0

        Evergreen.V2.Types.UserSignedIn p0 p1 ->
            Evergreen.V4.Types.UserSignedIn (p0 |> migrate_User_User) p1

        Evergreen.V2.Types.SendUser p0 ->
            Evergreen.V4.Types.SendUser (p0 |> migrate_User_User)


migrate_Types_UserToNotebookDict : Evergreen.V2.Types.UserToNotebookDict -> Evergreen.V4.Types.UserToNotebookDict
migrate_Types_UserToNotebookDict old =
    old |> Dict.map (\k -> migrate_Types_NoteBookDict)


migrate_User_User : Evergreen.V2.User.User -> Evergreen.V4.User.User
migrate_User_User old =
    old
