module Evergreen.Migrate.V22 exposing (..)

{-| This migration file was automatically generated by the lamdera compiler.

It includes:

  - A migration for each of the 6 Lamdera core types that has changed
  - A function named `migrate_ModuleName_TypeName` for each changed/custom type

Expect to see:

  - `Unimplement–µd` values as placeholders wherever I was unable to figure out a clear migration path for you
  - `@NOTICE` comments for things you should know about, i.e. new custom type constructors that won't get any
    value mappings from the old type by default

You can edit this file however you wish! It won't be generated again.

See <https://dashboard.lamdera.app/docs/evergreen> for more info.

-}

import Dict
import Evergreen.V21.Authentication
import Evergreen.V21.Credentials
import Evergreen.V21.Notebook.Book
import Evergreen.V21.Notebook.Cell
import Evergreen.V21.Notebook.Types
import Evergreen.V21.Types
import Evergreen.V21.User
import Evergreen.V22.Authentication
import Evergreen.V22.Credentials
import Evergreen.V22.Notebook.Book
import Evergreen.V22.Notebook.Cell
import Evergreen.V22.Notebook.Types
import Evergreen.V22.Types
import Evergreen.V22.User
import Lamdera.Migrations exposing (..)
import List
import Maybe


frontendModel : Evergreen.V21.Types.FrontendModel -> ModelMigration Evergreen.V22.Types.FrontendModel Evergreen.V22.Types.FrontendMsg
frontendModel old =
    ModelUnchanged


backendModel : Evergreen.V21.Types.BackendModel -> ModelMigration Evergreen.V22.Types.BackendModel Evergreen.V22.Types.BackendMsg
backendModel old =
    ModelMigrated ( migrate_Types_BackendModel old, Cmd.none )


frontendMsg : Evergreen.V21.Types.FrontendMsg -> MsgMigration Evergreen.V22.Types.FrontendMsg Evergreen.V22.Types.FrontendMsg
frontendMsg old =
    MsgUnchanged


toBackend : Evergreen.V21.Types.ToBackend -> MsgMigration Evergreen.V22.Types.ToBackend Evergreen.V22.Types.BackendMsg
toBackend old =
    MsgUnchanged


backendMsg : Evergreen.V21.Types.BackendMsg -> MsgMigration Evergreen.V22.Types.BackendMsg Evergreen.V22.Types.BackendMsg
backendMsg old =
    MsgUnchanged


toFrontend : Evergreen.V21.Types.ToFrontend -> MsgMigration Evergreen.V22.Types.ToFrontend Evergreen.V22.Types.FrontendMsg
toFrontend old =
    MsgUnchanged


migrate_Types_BackendModel : Evergreen.V21.Types.BackendModel -> Evergreen.V22.Types.BackendModel
migrate_Types_BackendModel old =
    { currentTime = old.currentTime
    , randomSeed = old.randomSeed
    , uuidCount = old.uuidCount
    , uuid = old.uuid
    , randomAtmosphericInt = old.randomAtmosphericInt
    , dataSetLibrary = old.dataSetLibrary
    , userToNoteBookDict = old.userToNoteBookDict |> migrate_Types_UserToNotebookDict
    , usernameToPackageDictDict = old.usernameToPackageDictDict
    , slugDict = old.slugDict
    , authenticationDict = old.authenticationDict |> migrate_Authentication_AuthenticationDict
    }


migrate_Authentication_AuthenticationDict : Evergreen.V21.Authentication.AuthenticationDict -> Evergreen.V22.Authentication.AuthenticationDict
migrate_Authentication_AuthenticationDict old =
    old |> Dict.map (\k -> migrate_Authentication_UserData)


migrate_Authentication_UserData : Evergreen.V21.Authentication.UserData -> Evergreen.V22.Authentication.UserData
migrate_Authentication_UserData old =
    { user = old.user |> migrate_User_User
    , credentials = old.credentials |> migrate_Credentials_Credentials
    }


migrate_Credentials_Credentials : Evergreen.V21.Credentials.Credentials -> Evergreen.V22.Credentials.Credentials
migrate_Credentials_Credentials old =
    case old of
        Evergreen.V21.Credentials.V1 p0 p1 ->
            Evergreen.V22.Credentials.V1 p0 p1


migrate_Notebook_Book_Book : Evergreen.V21.Notebook.Book.Book -> Evergreen.V22.Notebook.Book.Book
migrate_Notebook_Book_Book old =
    { id = old.id
    , dirty = old.dirty
    , slug = old.slug
    , origin = old.origin
    , author = old.author
    , createdAt = old.createdAt
    , updatedAt = old.updatedAt
    , public = old.public
    , title = old.title
    , cells = old.cells |> List.map migrate_Notebook_Cell_Cell
    , currentIndex = old.currentIndex
    , packageNames = old.packageNames
    , tags = old.tags
    , options = old.options
    }


migrate_Notebook_Cell_Cell : Evergreen.V21.Notebook.Cell.Cell -> Evergreen.V22.Notebook.Cell.Cell
migrate_Notebook_Cell_Cell old =
    { index = old.index
    , text = old.text
    , tipe = old.tipe |> migrate_Notebook_Cell_CellType
    , value = old.value |> migrate_Notebook_Cell_CellValue
    , cellState = old.cellState |> migrate_Notebook_Cell_CellState
    , locked = old.locked
    , report = old.report |> Maybe.map (List.map migrate_Notebook_Types_MessageItem)
    , replData = old.replData
    }


migrate_Notebook_Cell_CellState : Evergreen.V21.Notebook.Cell.CellState -> Evergreen.V22.Notebook.Cell.CellState
migrate_Notebook_Cell_CellState old =
    case old of
        Evergreen.V21.Notebook.Cell.CSEdit ->
            Evergreen.V22.Notebook.Cell.CSEdit

        Evergreen.V21.Notebook.Cell.CSView ->
            Evergreen.V22.Notebook.Cell.CSView


migrate_Notebook_Cell_CellType : Evergreen.V21.Notebook.Cell.CellType -> Evergreen.V22.Notebook.Cell.CellType
migrate_Notebook_Cell_CellType old =
    case old of
        Evergreen.V21.Notebook.Cell.CTCode ->
            Evergreen.V22.Notebook.Cell.CTCode

        Evergreen.V21.Notebook.Cell.CTMarkdown ->
            Evergreen.V22.Notebook.Cell.CTMarkdown


migrate_Notebook_Cell_CellValue : Evergreen.V21.Notebook.Cell.CellValue -> Evergreen.V22.Notebook.Cell.CellValue
migrate_Notebook_Cell_CellValue old =
    case old of
        Evergreen.V21.Notebook.Cell.CVString p0 ->
            Evergreen.V22.Notebook.Cell.CVString p0

        Evergreen.V21.Notebook.Cell.CVMarkdown p0 ->
            Evergreen.V22.Notebook.Cell.CVMarkdown p0

        Evergreen.V21.Notebook.Cell.CVNone ->
            Evergreen.V22.Notebook.Cell.CVNone


migrate_Notebook_Types_MessageItem : Evergreen.V21.Notebook.Types.MessageItem -> Evergreen.V22.Notebook.Types.MessageItem
migrate_Notebook_Types_MessageItem old =
    case old of
        Evergreen.V21.Notebook.Types.Plain p0 ->
            Evergreen.V22.Notebook.Types.Plain p0

        Evergreen.V21.Notebook.Types.Styled p0 ->
            Evergreen.V22.Notebook.Types.Styled (p0 |> migrate_Notebook_Types_StyledString)


migrate_Notebook_Types_StyledString : Evergreen.V21.Notebook.Types.StyledString -> Evergreen.V22.Notebook.Types.StyledString
migrate_Notebook_Types_StyledString old =
    old


migrate_Types_NoteBookDict : Evergreen.V21.Types.NoteBookDict -> Evergreen.V22.Types.NoteBookDict
migrate_Types_NoteBookDict old =
    old |> Dict.map (\k -> migrate_Notebook_Book_Book)


migrate_Types_UserToNotebookDict : Evergreen.V21.Types.UserToNotebookDict -> Evergreen.V22.Types.UserToNotebookDict
migrate_Types_UserToNotebookDict old =
    old |> Dict.map (\k -> migrate_Types_NoteBookDict)


migrate_User_User : Evergreen.V21.User.User -> Evergreen.V22.User.User
migrate_User_User old =
    old
